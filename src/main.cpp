#include <iostream>
#include <pe.hpp>

int main() {
    PE pe( "./ConsoleApplication1.exe" );

    printf("Magic: %x\n", pe.dos_header.e_magic);
    printf("Offset to NT Header: %x\n", pe.dos_header.e_cblp);

    COFF_HEADER coff = pe.pe_header.coff_header;
    printf("Machine: %x\n", coff.machine);

    OptionalHeader oh = pe.pe_header.optional_header;
    printf("Size of rvas: %d\n", oh.number_of_rva_and_sizes);

    std::vector<DataDirectory *> dirs = oh.directories;
    DataDirectory *dir = dirs.at(4);
    printf("Dirs Len: %d\n", dirs.size());
    printf("%x\n", dir->base);
    printf("=> %s %x %x\n", dir->name.c_str(), dir->base, dir->size);

    // pe.dos_header.e_lfanew = 0x40;

    DataDirectory *sh = *std::find_if( pe.pe_header.optional_header.directories.rbegin(), pe.pe_header.optional_header.directories.rend(),
    [](DataDirectory *sec) {return !sec->name.compare(std::string("TLSTable")); } );

    sh->base = 0x8000;
    sh->size = 0x28;

    Section tlstramp_section;
    tlstramp_section.data = std::vector<u8>{ 
        0x30, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,                                                 // StartAddressOfRawData
        0x40, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,                                                 // EndAddressOfRawData
        0x50, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,                                                 // AddressOfIndex
        0x60, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00,                                                 // AddressOfCallback
        0x00, 0x00, 0x00, 0x00,                                                                         // SizeOfZeroFill
        0x00, 0x00, 0x01, 0x00,                                                                         // Characteristics
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,                                                 // align
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008030
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008040
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008050
        0x70, 0x80, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008060 ADDRESS TO CALLBACK
        0x48, 0x83, 0xEC, 0x28, 0x48, 0x83, 0xc4, 0x28, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008070
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x0140008080
    };
    pe.sections.push_back(tlstramp_section);

    pe.pe_header.coff_header.num_of_sections += 1;
    pe.pe_header.sections.push_back(SectionHeader(
        std::string(".tramp"),
        tlstramp_section.data.size(),
        0x8000,
        tlstramp_section.data.size(),
        0x2A00 + 0x200,
        0x0,
        0x0,
        0x0,
        0x0,
        0x42000020
    ));

    pe.save( "./fixed.exe" );
    printf("Done\n");
}